{"Name":"Firebase AdMob for iOS","Id":3258,"Alias":"firebaseiosadmob","Description":"AdMob by Google is an easy way to monetize mobile apps with targeted, in-app advertising.\n\nAdMob by Google is a mobile advertising platform that you can use to generate revenue from your app. Using AdMob with Firebase Analytics provides you with additional app usage data and analytics capabilities.\n\n## Key capabilities\n\n* **Earn more from AdMob\u0027s in-app ads:** Show ads from millions of Google advertisers in real time, or use AdMob Mediation to earn from over 40 premium networks through the AdMob platform to simplify your ad operations, improve competition, and earn more, for free. AdMob mediation has [ad network optimization](https://support.google.com/admob/answer/3379794) built in, which automatically adjusts the positions of your other ad networks in your mediation stack to ensure you maximize your revenue.\n* **Improve user experience:** Native and video ads create a positive user experience as you monetize by matching the look and feel of your app. Choose from different ad templates, customize them, and experiment with different layouts on the fly without republishing your app.\n* **Scale fast:** When your app\u0027s a global or domestic hit, you can monetize users quickly with AdMob, by showing ads to users in more than 200 markets. More than one app? AdMob house ads is a free tool that enables you to cross-promote your apps to your userbase, across your family of apps.\n* **Access monetization reports:** AdMob is the premier monetization platform for mobile. While generating ad revenue, AdMob also produces its own monetization reports that you can use to make smarter decisions about product strategy.\n\n## How does it work?\n\nAdMob by Google helps you monetize your mobile app through in-app advertising. Ads can be displayed as banner ads, interstitial ads, video ads, or native ads â€” which are seamlessly added to platform native UI components. On Android, you can additionally display in-app purchase ads, which allow users to purchase advertised products from within your app.\n\nBefore you can display ads within your app, you\u0027ll need to create an AdMob account and activate one or more Ad Unit IDs. This is a unique identifier for the places in your app where ads are displayed. If you are already using AdMob in your app, all of your existing Ad Unit IDs continue to work after you\u0027ve added Firebase to your app.\n\nAdMob uses the Google Mobile Ads SDK. The Google Mobile Ads SDK helps app developers gain insights about their users, drive more in-app purchases, and maximize ad revenue. In order to do so, the default integration of the Mobile Ads SDK collects information such as device information, publisher-provided location information, and general in-app purchase information such as item purchase price and currency.\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/admob/) to see original Firebase documentation._\u003c/sub\u003e","Version":"7.15.0.1","Summary":"Connect with advertisers and show relevant ads in your app. Users click on ads, you make money.","QuickStart":"# Get Started\n\nAdMob uses the Google Mobile Ads SDK. The Google Mobile Ads SDK helps app developers gain insights about their users, drives more in-app purchases, and maximizes ad revenue. To do so, the default integration of the Mobile Ads SDK collects information such as device information, publisher-provided location information, and general in-app purchase information (such as item purchase price and currency).\n\n**_Note: The Mobile Ads SDK does not collect payment card information._**\n\n## Add Firebase to your app\n\n1. Create a Firebase project in the [Firebase console][1], if you don\u0027t already have one. If you already have an existing Google project associated with your mobile app, click **Import Google Project**. Otherwise, click **Create New Project**.\n2. Click **Add Firebase to your iOS app** and follow the setup steps. If you\u0027re importing an existing Google project, this may happen automatically and you can just [download the config file][2].\n3. When prompted, enter your app\u0027s bundle ID. It\u0027s important to enter the bundle ID your app is using; this can only be set when you add an app to your Firebase project.\n4. At the end, you\u0027ll download a `GoogleService-Info.plist` file. You can [download this file][2] again at any time.\n5. In [Firebase console][1], go to AdMob section and link your recently created app to AdMob.\n\n## Configure AdMob in your app\n\nOnce you have your `GoogleService-Info.plist` file downloaded in your computer, do the following steps in Xamarin Studio:\n\n1. Add `GoogleService-Info.plist` file to your app project.\n2. Set `GoogleService-Info.plist` **build action** behaviour to `Bundle Resource` by Right clicking/Build Action.\n3. Open `GoogleService-Info.plist` file and change `IS_ADS_ENABLED` value to `Yes`. \n4. Add the following line of code somewhere in your app, typically in your AppDelegate\u0027s `FinishedLaunching` method (don\u0027t forget to import `Firebase.Analytics` namespace):\n\n```csharp\nApp.Configure ();\n```\n\n## Initialize the Google Mobile Ads SDK\n\nAt app launch, initialize the Google Mobile Ads SDK by calling `Configure` method:\n\n```csharp\n// Get your Application Id here: https://apps.admob.com/#account/appmgmt:\nMobileAds.Configure (\"ca-app-pub-XXXXXXXXXXXXXXXX~NNNNNNNNNN\");\n```\n\nInitializing the Google Mobile Ads SDK at app launch allows the SDK to fetch app-level settings and perform configuration tasks as early as possible. This can help reduce latency for the initial ad request. Initialization requires an app ID. App IDs are unique identifiers given to mobile apps when they\u0027re registered in the AdMob console.\n\nTo find your app ID, click the [App management][3] option under the settings dropdown (located in the upper right hand corner) on the AdMob account page. App IDs have the form **ca-app-pub-XXXXXXXXXXXXXXXX~NNNNNNNNNN**.\n\n## Banner Ads\n\n### Banner sizes\n\n| Size (WxH)              | Description          | Availability         | AdSize constant                                               |\n|:-----------------------:|:--------------------:|:--------------------:|:-------------------------------------------------------------:|\n| 320x50                  | Standard banner      | Phones and tablets   | kGADAdSizeBanner                                              |\n| 320x100                 | Large banner         | Phones and tablets   | kGADAdSizeLargeBanner                                         |\n| 300x250                 | IAB medium rectangle | Phones and tablets   | kGADAdSizeMediumRectangle                                     |\n| 468x60                  | IAB full-size banner | Tablets              | kGADAdSizeFullBanner                                          |\n| 728x90                  | IAB leaderboard      | Tablets              | kGADAdSizeLeaderboard                                         |\n| Screen width x 32,50,90 | Smart banner         | Phones and tablets   | kGADAdSizeSmartBannerPortrait, kGADAdSizeSmartBannerLandscape |\n\n### Smart Banners\n\nSmart Banners are ad units that render screen-wide banner ads on any screen size across different devices in either orientation. Smart Banners help deal with increasing screen fragmentation across different devices by \"smartly\" detecting the width of the phone in its current orientation, and making the ad view that size.\n\nThree ad heights (in density-independent pixel [dp]) are implemented in Smart Banners:\n\n* **32:** Device screen height \u003c= 400\n* **50:** 400 \u003c Device screen height \u003c= 720\n* **90:** Device screen height \u003e 720\n\nFor some devices, such as phones, the height of the device varies with its orientation. Typically, Smart Banner ads on phones are full width x 50dp in portrait and full width x 32dp in landscape, while on tablets, ads are full width x 90dp in both orientations.\n\nWhen an image ad isn\u0027t large enough to take up the entire allotted space, the image is centered and the space on either side is filled in.\n\n### Ad lifecycle events\n\nYou may optionally track ad lifecycle events like request failures or \"click-through\" by implementing all or part of `BannerView` events or `IBannerViewDelegate` interface.\n\n* **AdReceived Event or DidReceiveAd method:** This is called when `LoadRequest` method has succeeded. This is a good opportunity to show the ad.\n\n* **ReceiveAdFailed event or DidFailToReceiveAd method:** This is called when `LoadRequest` method has failed, typically because of network failure, an app configuration error, or a lack of ad inventory.\n\n* **WillPresentScreen event or method:** This callback is sent immediately before the user is presented with a full-screen ad UI in response to their touching the ad. At this point, you should pause any animations, timers, or other activities that assume user interaction and save app state.\n\n* **WillDismissScreen event or method:** Sent immediately before the ad\u0027s full-screen UI is dismissed, restoring your app and the root view controller. At this point, you should restart any foreground activities paused.\n\n* **ScreenDismissed event or DidDismissScreen method:** Sent when the user has exited the ad\u0027s full-screen UI.\n\n* **WillLeaveApplication event or method:** Sent just before the app gets backgrounded or terminated as a result of the user touching a Click-to-App-Store or Click-to-iTunes banner. The normal `UIApplicationDelegate` notifications like `DidEnterBackground` arrive immediately before this.\n\n**_Note: Do not request an ad in `WillEnterForeground` method, as the request will be ignored. Place the request in `OnActivated` method instead._**\n\n### Create a Banner\n\nTo create a banner ad unit you can use the following code in a similar way:\n\n```csharp\nusing Google.MobileAds;\n...\n\nconst string bannerId = \"\u003cGet your ID at google.com/ads/admob\u003e\";\n\nBannerView adView;\nbool viewOnScreen = false;\n\npublic void AddBanner ()\n{\n\t// Setup your BannerView, review AdSizeCons class for more Ad sizes. \n\tadView = new BannerView (size: AdSizeCons.Banner, origin: new CGPoint (0, 0)) {\n\t\tAdUnitID = bannerId,\n\t\tRootViewController = this\n\t};\n\t\n\t// Wire AdReceived event to know when the Ad is ready to be displayed\n\tadView.AdReceived += (object sender, EventArgs e) =\u003e {\n\t\tif (!viewOnScreen) {\n\t\t\tView.AddSubview (adView);\n\t\t\tviewOnScreen = true;\n\t\t}\n\t};\n\n\tvar request = Request.GetDefaultRequest ();\n\t// Requests test ads on devices you specify. Your test device ID is printed to the console when\n\t// an ad request is made. GADBannerView automatically returns test ads when running on a\n\t// simulator. After you get your device ID, add it here\n\trequest.TestDevices = new [] { Request.SimulatorId.ToString () };\n  \t\n\t// Request an ad\n\tadView.LoadRequest (request);\n}\n```\n\n## Interstitial Ads\n\nInterstitial ads are full-screen ads that are overlaid on top of an app. They are generally displayed at natural app transition points such as in between game levels.\n\n### Add interstitial ads to your project\n\nThe recommended lifecycle for a Interstitial is to preload it when the app starts and show it at an appropriate time in your app when it\u0027s ready:\n\n```csharp\nusing Google.MobileAds;\n...\n\nconst string intersitialId = \"\u003cGet your ID at google.com/ads/admob\u003e\";\n\nInterstitial adInterstitial;\n\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\t\n\tCreateAndRequestInterstitial ();\n}\n\npublic void AfterSomeTime ()\n{\t\n\tif (adInterstitial.IsReady)\n\t\tadInterstitial.PresentFromRootViewController (navController);\n}\n\nvoid CreateAndRequestInterstitial ()\n{\n\tadInterstitial = new Interstitial (intersitialId);\n\tadInterstitial.ScreenDismissed += (sender, e) =\u003e {\n\t\t// Interstitial is a one time use object. That means once an interstitial is shown, HasBeenUsed \n\t\t// returns true and the interstitial can\u0027t be used to load another ad. \n\t\t// To request another interstitial, you\u0027ll need to create a new Interstitial object.\n\t\tadInterstitial.Dispose ();\n\t\tadInterstitial = null;\n\t\tCreateAndRequestInterstitial ();\n\t};\n\t\n\tvar request = Request.GetDefaultRequest ();\n\t// Requests test ads on devices you specify. Your test device ID is printed to the console when\n\t// an ad request is made. GADBannerView automatically returns test ads when running on a\n\t// simulator. After you get your device ID, add it here\n\trequest.TestDevices = new [] { Request.SimulatorId.ToString () };\n\n\tadInterstitial.LoadRequest (request);\n}\n\n```\n\n### Only show GADInterstitial once\n\n`Interstitial` is a one time use object. That means once an interstitial is shown, HasBeenUsed returns true and the interstitial can\u0027t be used to load another ad. To request another interstitial, you\u0027ll need to create a new `Interstitial` object. The best practice, as shown above, is to have a helper method to handle creating and loading an interstitial.\n\nThe best place to allocate another interstitial is in the `Interstitial.ScreenDismissed` event or `DidDismissScreen` method if you implemented `IInterstitialDelegate` interface so that the next interstitial starts loading as soon as the previous one is dismissed.\n\n## iOS 9 Considerations\n\nApp Transport Security (ATS) is a privacy feature introduced in iOS 9. It\u0027s enabled by default for new applications and enforces secure connections. This may affect your app\u0027s integration with the Google Mobile Ads SDK. See the [NSAppTransportSecurity][4] documentation for details.\n\nThis change affects all iOS 9 devices running apps built with Xcode 7 that don\u0027t disable ATS. The following log message appears when a non-ATS-compliant app attempts to serve an ad via HTTP on iOS 9:\n\n```\nApp Transport Security has blocked a cleartext HTTP (http://)\nresource load since it is insecure. Temporary exceptions can be\nconfigured via your app\u0027s Info.plist file.\n```\n\nTo ensure your ads are not impacted by ATS, Apple has provided the following exception that you can add to your app\u0027s Info.plist file:\n\n```\n\u003ckey\u003eNSAppTransportSecurity\u003c/key\u003e\n\u003cdict\u003e\n    \u003ckey\u003eNSAllowsArbitraryLoads\u003c/key\u003e\n    \u003ctrue/\u003e\n\u003c/dict\u003e\n```\n\n### Known issues\n\n* App doesn\u0027t compile when `Incremental builds` is enabled. (Bug [#43689][5])\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/admob/ios/quick-start) to see original Firebase documentation._\u003c/sub\u003e\n\n[1]: https://firebase.google.com/console/\n[2]: http://support.google.com/firebase/answer/7015592\n[3]: https://apps.admob.com/#account/appmgmt:\n[4]: https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/plist/info/NSAppTransportSecurity\n[5]: https://bugzilla.xamarin.com/show_bug.cgi?id=43689","Hash":"fbbd8a0708dd49c9cc21c0938a0e155e","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}